import path from 'path';

import happoPluginPuppeteer from 'happo-plugin-puppeteer';

import MockTarget from './MockTarget';
import * as defaultConfig from '../../src/DEFAULTS';
import makeRequest from '../../src/makeRequest';
import runCommand from '../../src/commands/run';

jest.mock('../../src/makeRequest');

let subject;
let config;
let sha;

beforeEach(() => {
  makeRequest.mockImplementation(() => Promise.resolve({}));
  sha = 'foobar';
  config = {
    ...defaultConfig,
    targets: { firefox: new MockTarget() },
    include: 'test/integrations/examples/*-plain-happo.js*',
    stylesheets: [
      path.join(__dirname, '/styles.css'),
      'https://meyerweb.com/eric/tools/css/reset/reset.css',
    ],
    type: 'plain',
    rootElementSelector: '.custom-root',
    plugins: [happoPluginPuppeteer({ launchOptions: { args: ['--no-sandbox'] } })],
  };
  subject = () => runCommand(sha, config, {});
});

[true, false].forEach((usePuppeteer) => {
  describe(usePuppeteer ? 'with puppeteer' : 'with jsdom', () => {
    beforeEach(() => {
      if (!usePuppeteer) {
        config.plugins = [];
      }
    });

    it('produces the right html', async () => {
      await subject();
      expect(
        config.targets.firefox.snapPayloads.sort((a, b) => {
          if (a.component + a.variant < b.component + b.variant) {
            return -1;
          }
          return 1;
        }),
      ).toEqual([
        {
          component: 'Foo-plain',
          css: '',
          html: '<button>Click meish</button>',
          variant: 'anotherVariant',
        },
        {
          component: 'Foo-plain',
          css: '',
          html: `<button style="width: ${usePuppeteer ? 250 : 0}px;">Ready</button>`,
          variant: 'asyncVariant',
        },
        {
          component: 'Foo-plain',
          css: '',
          html: '<button>Click me</button>',
          variant: 'default',
        },
        {
          component: 'InlineCSSVariables-plain',
          css: '',
          html: `<div style="--var:${usePuppeteer ? '' : ' '}red;">I am red</div>`,
          variant: 'default',
        },
      ]);
    });

    it('produces the right css', async () => {
      await subject();
      const css = config.targets.firefox.globalCSS;
      // styles.css
      expect(css[0].css.trim()).toEqual('.a { b: c }');

      // https://meyerweb.com/eric/tools/css/reset/reset.css
      expect(css[1].css.slice(0, 44)).toEqual(
        '/* http://meyerweb.com/eric/tools/css/reset/',
      );

      // css generated by examples
      expect(css[2].css).toMatch('button { text-align: center }');
      expect(css[2].css).toMatch('button { color: red }');
    });
  });
});
