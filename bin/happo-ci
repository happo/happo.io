#!/bin/bash

# Generates and uploads Happo diffs for the differences between the base commit
# and current commit.

# Make the whole script fail on errors
set -eou pipefail

# Initialize optional env variables
INSTALL_CMD=${INSTALL_CMD:-}
HAPPO_IS_ASYNC=${HAPPO_IS_ASYNC:-true}
HAPPO_SKIP_START_JOB=${HAPPO_SKIP_START_JOB:-}
HAPPO_GIT_COMMAND=${HAPPO_GIT_COMMAND:-git}
HAPPO_COMMAND=${HAPPO_COMMAND:-"node_modules/happo.io/build/cli.js"}

# Make HAPPO_IS_ASYNC available to sub commands (`happo run`, `happo compare`)
export HAPPO_IS_ASYNC

# Make sure we use the full commit shas
if [ -n "$PREVIOUS_SHA" ] && [ ${#PREVIOUS_SHA} -ne 40 ]; then
  PREVIOUS_SHA="$(${HAPPO_GIT_COMMAND} rev-parse "$PREVIOUS_SHA")"
fi
if [ ${#CURRENT_SHA} -ne 40 ]; then
  CURRENT_SHA="$(${HAPPO_GIT_COMMAND} rev-parse "$CURRENT_SHA")"
fi

HAPPO_FALLBACK_SHAS_COUNT=${HAPPO_FALLBACK_SHAS_COUNT:-50}
HAPPO_FALLBACK_SHAS=${HAPPO_FALLBACK_SHAS:-$(${HAPPO_GIT_COMMAND} log --format=%H --first-parent --max-count=${HAPPO_FALLBACK_SHAS_COUNT} "$PREVIOUS_SHA"^ || true)}

echo "Using the following ENV variables:"
echo "PREVIOUS_SHA: ${PREVIOUS_SHA}"
echo "CURRENT_SHA: ${CURRENT_SHA}"
echo "CHANGE_URL: ${CHANGE_URL}"
echo "INSTALL_CMD: ${INSTALL_CMD}"
echo "HAPPO_IS_ASYNC: ${HAPPO_IS_ASYNC}"
echo "HAPPO_SKIP_START_JOB: ${HAPPO_SKIP_START_JOB}"
echo "HAPPO_GIT_COMMAND: ${HAPPO_GIT_COMMAND}"
echo "HAPPO_COMMAND: ${HAPPO_COMMAND}"
echo "HAPPO_FALLBACK_SHAS_COUNT: ${HAPPO_FALLBACK_SHAS_COUNT}"

echo "Using Node version: $(node -v)"


NPM_CLIENT="npm"
NPM_CLIENT_FLAGS="--no-save"
CHECK_FOR_HAPPO="npm ls happo.io"
FIRST_RUN="false"
if [ -f "yarn.lock" ]; then
  echo "Detected yarn.lock - using yarn to install dependencies"
  NPM_CLIENT="yarn"
  NPM_CLIENT_FLAGS="--pure-lockfile"
  CHECK_FOR_HAPPO="grep 'happo\.io@' yarn.lock"
fi

CHECK_FOR_HAPPO=${HAPPO_CHECK:-"${CHECK_FOR_HAPPO}"}

run-install() {
  if [ -z "$INSTALL_CMD" ]; then
    # Run yarn/npm install
    ${NPM_CLIENT} install ${NPM_CLIENT_FLAGS}
  else
    # Run custom install command(s)
    eval "$INSTALL_CMD"
  fi
}

run-happo() {
  SHA=$1
  RUN_HAPPO_CHECK="false"

  if [ "$HAPPO_IS_ASYNC" = "false" ]; then
    HEAD_SHA=$(${HAPPO_GIT_COMMAND} rev-parse HEAD)
    if [ "$HEAD_SHA" != "$SHA" ]; then
      RUN_HAPPO_CHECK="true"
      ${HAPPO_GIT_COMMAND} checkout --force --quiet "$SHA"
      # Install dependencies (again, since we're in a different place in git
      # history)
      run-install
    fi
  fi

  COMMIT_SUBJECT="$(${HAPPO_GIT_COMMAND} show -s --format=%s)"

  if [ "$RUN_HAPPO_CHECK" = "false" ] || eval "$CHECK_FOR_HAPPO"; then
    "$HAPPO_COMMAND" run "$SHA" \
    --link "${CHANGE_URL}" \
    --message "${COMMIT_SUBJECT}"
  else
    echo "NPM package happo.io not installed. Assuming this is the first run."
    FIRST_RUN="true"
  fi
}

if [ "$CURRENT_SHA" = "$PREVIOUS_SHA" ] || [ -z "$PREVIOUS_SHA" ]; then
  echo "We're not on a branch, so there's nothing to compare against."
  echo "Running a single happo run on ${CURRENT_SHA}"
  run-happo "$CURRENT_SHA"
  exit 0;
fi

COMMIT_SUBJECT="$(${HAPPO_GIT_COMMAND} show -s --format=%s)"
COMMIT_AUTHOR="$(${HAPPO_GIT_COMMAND} show -s --format=%ae)"

# If orchestration is being used and there is a guarantee that the orchestrate
# endpoint will be hit before this runs, this start-job step can be skipped.
if [ -z "$HAPPO_SKIP_START_JOB" ]; then
  "$HAPPO_COMMAND" start-job "$PREVIOUS_SHA" "$CURRENT_SHA" \
    --link "${CHANGE_URL}" \
    --message "${COMMIT_SUBJECT}"
fi

run-happo "$CURRENT_SHA"

if [ "$HAPPO_IS_ASYNC" = "false" ]; then
  # Check if we need to generate a baseline. In some cases, the baseline is
  # already there (some other PR uploaded it), and we can just use the existing
  # one.
  if ! "$HAPPO_COMMAND" has-report "$PREVIOUS_SHA"; then
    echo "No previous report found for ${PREVIOUS_SHA}. Generating one..."
    run-happo "$PREVIOUS_SHA"

    # Restore git and node_modules to their original state so that we can run
    # `happo compare` on CURRENT_SHA instead of PREVIOUS_SHA.
    "$HAPPO_GIT_COMMAND" checkout --force --quiet "$CURRENT_SHA"
    run-install
  else
    echo "Re-using existing report for ${PREVIOUS_SHA}."
  fi

  if [ "$FIRST_RUN" = "true" ]; then
    "$HAPPO_COMMAND" empty "$PREVIOUS_SHA"
  fi
fi

# Compare reports from the two SHAs.
# `happo compare` exits with an exit code of 113 if there is a diff. To work with
# the exit status, we need to temporarily turn off the fail-on-error behavior.
set +e
SUMMARY=$("$HAPPO_COMMAND" compare "$PREVIOUS_SHA" "$CURRENT_SHA" \
  --link "$CHANGE_URL" \
  --message "$COMMIT_SUBJECT" \
  --author "$COMMIT_AUTHOR")
EXIT_CODE=$?
set -e

echo "$SUMMARY"

if [ "$EXIT_CODE" = "113" ]; then
  # There is a diff. We don't want to fail the script in this case.
  exit 0
fi

exit $EXIT_CODE
